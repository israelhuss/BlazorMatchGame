@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>





<div class="container">
    <div class="row">
        @for (int i = 0; i < shuffeledAnimals.Count; i++)
        {
            string animal = shuffeledAnimals[i];
            string uniqueDescription = $"Button #{i}";

            <div class="col-3">
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => ButtonClick(animal, uniqueDescription))">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches Found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time Elapsed: @timeDisplay</h2>
    </div>
</div>


@code {
    List<string> animalEmoji = new List<string>()
{
        "🐈", "🐈",
        "🐶", "🐶",
        "🦁", "🦁",
        "🐘", "🐘",
        "🐒", "🐒",
        "🐼", "🐼",
        "🐬", "🐬",
        "🦝", "🦝"
    };



    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        setUpGame();
    }


    List<string> shuffeledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthOfSecondElapsed = 0;
    string timeDisplay;


    private void setUpGame()
    {
        Random random = new Random();
        shuffeledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();

        matchesFound = 0;
        tenthOfSecondElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string description)
    {
        if (lastAnimalFound == string.Empty)
        {
            //First selection, just remember it.
            lastAnimalFound = animal;
            lastDescription = description;

            timer.Start();

        }
        else if (lastAnimalFound == animal && lastDescription != description)
        {
            //Match found! reset for next pair
            lastAnimalFound = string.Empty;

            //Replace the found match with empty strings
            shuffeledAnimals = shuffeledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " Play again?";

                setUpGame();
            }
        }
        else
        {
            //User selected a second animal that doesn't match. reset
            lastAnimalFound = string.Empty;
        }
    }

    public void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthOfSecondElapsed++;
            timeDisplay = (tenthOfSecondElapsed / 10F).ToString("0.0");
            StateHasChanged();
        });
    }
}